annotate('text', x=1.5, y=max_y+0.3, label='***', size=7)+
geom_segment(aes(x = 2, y=max_y+1, xend= 3, yend=max_y+1), size= 1)+
annotate('text', x=2.5, y=max_y+ 1.3, label='**', size=7)+
geom_segment(aes(x = 1, y=max_y+2, xend= 3, yend=max_y+2), size= 1)+
annotate('text', x=2, y=max_y+2.3, label='***', size=7)
ggsave(plot, file=paste0(plotPrefix, "RRS.jpeg"), width = 2000, height = 1500, dpi = 300, units = "px")
plot
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(lme4)
library(emmeans)
library(tidyverse)
library(car)
library(ggplot2)
#####  General settings #####
nAGQ = 1 # When writing code, set to 0, when getting final results, set to 1
vpn = 1 # Set to 1 if using VPN
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
# Get and declare functions
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location - Else it can't find functions.R
source("functions.R") # This is a file in the same directory where you can stash your functions so you can save them there and have them together
# Set WD
if (vpn == 1) {
Dir = "Z:\\shares\\ghepmk_data\\2020_Kappen_PMS\\" #data from VPN folder
} else {
Dir = "Z:\\shares\\ghepmk_data\\2020_Kappen_PMS\\" #data from github dir
}
setwd(Dir)
# Get data
data <-
read.csv(paste0(Dir, "06102021\\cleanedDataMoments.csv"),
header = TRUE,
sep = ) #upload data
# save figures
if (!dir.exists("figures")) #create map for storing the figures
dir.create("figures")
plotPrefix <- paste0(Dir, "figures/")
plotPrefix <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/figures paper/")
##### Data Cleaning #####
data$PMS[data$PMSScore == 0] = 'noPMS'
data$PMS[data$PMSScore == 1] = 'PMS'
data$PMS[data$PMSScore == 2] = 'PMDD'
data$PMS <- ordered(data$PMS, levels = c('noPMS', 'PMS', 'PMDD')) # Factorize and turn into ordered levels
# Factorize the rest of the data where needed
data$ID <- factor(data$ID)
data$newid = factor(seq(unique(data$ID))) # This creates a new ID variable that takes a logical order from 1-length(ID)
data$Moment <- factor(data$Moment)
# Exclude everyone on the pill/copper spiral/other: only those with Natural Contraception are left included
data_allcontraception <- data # Backup the data prior to exclusion
data <- data[data$Contraception == "Natural", ] # Only looking at non-hormonal contraceptives, so kick out all other data
##### States #####
##### State: PSS #####
formula <- 'PSS ~ PMS * Moment + Age + Order + (1|newid)' #
dataModel = data
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
modelNames = c(d0.1) # Only d0.1 is taken into consideration due to zeroes being present
# Model Selection
tabel <- cbind(AIC(d0.1))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III') # Jens always uses anova() in stead of Anova() for lmer, but when doing so it ignores 'type' parameter. Need to figure out..
# Between groups at time points
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ PMS | Moment, adjust ="fdr", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
# Between timepoints for groups
emmeans0.2 <- emmeans(chosenModel[[1]], pairwise ~ Moment | PMS, adjust ="fdr", type = "response")
emm0.2 <- summary(emmeans0.2)$emmeans
emmeans0.2$contrasts
## Visualisation
max_y<-max(data$PSS)
plot <- stateplot(data, emm0.2,'PSS', 'PSS') +
# Follicular
geom_segment(aes(x =0.9, y = max_y, xend = 1, yend = max_y), size= 1)+ # line bottom first
annotate('text', x=0.95, y=max_y + max_y/100, label='*', size=7)+ # star
geom_segment(aes(x =1, y = max_y+max_y/50, xend = 1.1, yend = max_y+max_y/50), size= 1)+ # line bottom first
annotate('text', x=1.05, y=max_y+max_y/50+max_y/100, label='*', size=7)+ # star
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='***', size=7)+
# Luteal
# geom_segment(aes(x =1.9, y = max_y, xend = 2, yend = max_y), size= 1)+ #bottom first line
# annotate('text', x=1.95, y=max_y + max_y/100, label='*', size=7)+
geom_segment(aes(x =2, y = max_y+max_y/50, xend = 2.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=2.05, y=max_y+max_y/50+max_y/100, label='*', size=7)+
geom_segment(aes(x =1.9, y = max_y+max_y/15, xend = 2.1, yend = max_y+max_y/15), size= 1)+# top line
annotate('text', x=2, y=max_y+max_y/15+max_y/100, label='***', size=7)
ggsave(plot, file=paste0(plotPrefix, "PSS_Plot.jpeg"), width = 2000, height = 1500, dpi = 300, units = "px")
# plot
##### State: BSRI #####
formula <- 'BSRI ~ PMS * Moment + Age + Order + (1|newid)' # Order had zero effect so was removed from the model | Age showed no effect and was removed from model
dataModel = data
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
modelNames = c(d0.1) # Only d0.1 is taken into consideration due to zeroes being present
# Model Selection
tabel <- cbind(AIC(d0.1))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
# Between groups at time points
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ PMS | Moment, adjust ="fdr", type = "response")
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
# Between timepoints for groups
emmeans0.2 <- emmeans(chosenModel[[1]], pairwise ~ Moment | PMS, adjust ="fdr", type = "response")
emm0.2 <- summary(emmeans0.2)$emmeans
emmeans0.2$contrasts
## Visualisation
max_y<-max(data$BSRI)
plot <- stateplot(data, emm0.2, 'BSRI', 'BSRI') +
# Follicular
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='**', size=7)+
# Luteal
geom_segment(aes(x =1.9, y = max_y+max_y/15, xend = 2.1, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=2, y=max_y+max_y/15+max_y/100, label='***', size=7)
ggsave(plot, file=paste0(plotPrefix, "BSRI_Plot.jpeg"), width = 2000, height = 1500, dpi = 300, units = "px")
plot
##### State: PTQ #####
formula <- 'PTQ ~ PMS * Moment + Age + Order + (1|newid) ' # Age no effect |  Order had zero effect so was removed from the model | First Menstrual showed no effect and was removed from model || ranef(d0.1)
dataModel = data
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)#ranef(d0.1)
modelNames = c(d0.1) # Only d0.1 is taken into consideration due to zeroes being present
# Model Selection
tabel <- cbind(AIC(d0.1))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
# Between groups at time points
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ PMS | Moment , adjust ="fdr", type = "response")
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
# Between timepoints for groups
emmeans0.2 <- emmeans(chosenModel[[1]], pairwise ~ Moment | PMS, adjust ="fdr", type = "response")
emm0.2 <- summary(emmeans0.2)$emmeans
emmeans0.2$contrasts
## Visualisation
max_y<-max(data$PTQ)
plot <- stateplot(data, emm0.2, "PTQ", 'PTQ') +
# Follicular
geom_segment(aes(x =1, y = max_y+max_y/50, xend = 1.1, yend = max_y+max_y/50), size= 1)+
annotate('text', x=1.05, y=max_y + max_y/100+max_y/50, label='**', size=7)+
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='***', size=7)+
# Luteal
# geom_segment(aes(x =1.9, y = max_y, xend = 2, yend = max_y), size= 1)+
# annotate('text', x=1.95, y=max_y+max_y/100, label='*', size=7)+
geom_segment(aes(x =2, y = max_y+max_y/50, xend = 2.1, yend = max_y+max_y/50), size= 1)+
annotate('text', x=2.05, y=max_y + max_y/100+max_y/50, label='***', size=7)+
geom_segment(aes(x =1.9, y = max_y+max_y/15, xend = 2.1, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=2, y=max_y+max_y/15+max_y/100, label='***', size=7)
ggsave(plot, file=paste0(plotPrefix, "PTQ_Plot.jpeg"), width = 2000, height = 1500, dpi = 300, units = "px")
plot
##### State: PSS #####
formula <- 'PSS ~ PMS * Moment + Age + Order + (1|newid)' #
dataModel = data
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
modelNames = c(d0.1) # Only d0.1 is taken into consideration due to zeroes being present
# Model Selection
tabel <- cbind(AIC(d0.1))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III') # Jens always uses anova() in stead of Anova() for lmer, but when doing so it ignores 'type' parameter. Need to figure out..
# Between groups at time points
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ PMS | Moment, adjust ="fdr", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
# Between timepoints for groups
emmeans0.2 <- emmeans(chosenModel[[1]], pairwise ~ Moment | PMS, adjust ="fdr", type = "response")
emm0.2 <- summary(emmeans0.2)$emmeans
emmeans0.2$contrasts
## Visualisation
max_y<-max(data$PSS)
plot <- stateplot(data, emm0.2,'PSS', 'PSS') +
# Follicular
geom_segment(aes(x =0.9, y = max_y, xend = 1, yend = max_y), size= 1)+ # line bottom first
annotate('text', x=0.95, y=max_y + max_y/100, label='*', size=7)+ # star
geom_segment(aes(x =1, y = max_y+max_y/50, xend = 1.1, yend = max_y+max_y/50), size= 1)+ # line bottom first
annotate('text', x=1.05, y=max_y+max_y/50+max_y/100, label='*', size=7)+ # star
geom_segment(aes(x =0.9, y = max_y+max_y/15, xend = 1.1, yend = max_y+max_y/15), size= 1)+ # top line
annotate('text', x=1, y=max_y+max_y/15+max_y/100, label='***', size=7)+
# Luteal
# geom_segment(aes(x =1.9, y = max_y, xend = 2, yend = max_y), size= 1)+ #bottom first line
# annotate('text', x=1.95, y=max_y + max_y/100, label='*', size=7)+
geom_segment(aes(x =2, y = max_y+max_y/50, xend = 2.1, yend = max_y+max_y/50), size= 1)+ # bottom second line
annotate('text', x=2.05, y=max_y+max_y/50+max_y/100, label='*', size=7)+
geom_segment(aes(x =1.9, y = max_y+max_y/15, xend = 2.1, yend = max_y+max_y/15), size= 1)+# top line
annotate('text', x=2, y=max_y+max_y/15+max_y/100, label='***', size=7)
ggsave(plot, file=paste0(plotPrefix, "PSS_Plot.jpeg"), width = 3000, height = 1500, dpi = 300, units = "px")
#################################
##### Isala x Ghep Analysis #####
#################################
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(lme4)
library(emmeans)
library(tidyverse)
library(car)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set working directory to current directory
dataDir = "Z:/shares/ghepmk_data/2020_Kappen_PMS//"
dateDir = "06102021//"
##### Loading data #####
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataSubset.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
View(ghepData)
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataScreen.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
View(ghepData)
isalaData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"Isala/PMS_UGENT_Q_for_mitchel.20220111.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
View(isalaData)
ghepData$IsalaNew <- substrRight(ghepData$Isala,5)
substrRight <- function(x, n){ # A function that takes the last n characters of a string
substr(x, nchar(x)-n+1, nchar(x))}
ghepData$IsalaNew <- substrRight(ghepData$Isala,5)
isalaData$IsalaNew <- substrRight(isalaData$Isala,5)
isalaData$IsalaNew <- substrRight(isalaData$index,5)
data <- merge(ghepData, isalaData, by = c("IsalaNew"))
View(data)
unique(isalaData$index)
length(unique(isalaData$index))
isalaData[unique(isalaData$index),]
test = isalaData[unique(isalaData$index),]
View(test)
isalaData[1, ]
isalaData[4, ]
unique(isalaData$index)
test = isalaData[isalaData$index != "ISALA00061"]
test = isalaData[isalaData$index != "ISALA00061", ]
View(test)
#################################
##### Isala x Ghep Analysis #####
#################################
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(lme4)
library(emmeans)
library(tidyverse)
library(car)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set working directory to current directory
dataDir = "Z:/shares/ghepmk_data/2020_Kappen_PMS//"
dateDir = "06102021//"
##### Loading data #####
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataSubset.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataScreen.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
isalaData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"Isala/PMS_UGENT_Q_for_mitchel.20220111.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
isalaData[isalaData$index != "ISALA00061", ] # Kicking out participant 000061 for now, because double entry
substrRight <- function(x, n){ # A function that takes the last n characters of a string
substr(x, nchar(x)-n+1, nchar(x))}
isalaData <- isalaData[isalaData$index != "ISALA00061", ] # Kicking out participant 000061 for now, because double entry
substrRight <- function(x, n){ # A function that takes the last n characters of a string
substr(x, nchar(x)-n+1, nchar(x))}
# Make identical Isala identifiers
ghepData$IsalaNew <- substrRight(ghepData$Isala,5)
isalaData$IsalaNew <- substrRight(isalaData$index,5)
data <- merge(ghepData, isalaData, by = c("IsalaNew"))
View(data)
names(isalaData)
names(isalaData) <- c("index", Leeftijd, "Day_in_Cycle", "Duratie_menstruatie", "Luteal", "Ovulation", "Follicular", "Poverty", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "Nervous_dichotomous", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")
colnames(isalaData) <- c("index", Leeftijd, "Day_in_Cycle", "Duratie_menstruatie", "Luteal", "Ovulation", "Follicular", "Poverty", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "Nervous_dichotomous", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")
names(isalaData) <- c("index", "Leeftijd", "Day_in_Cycle", "Duratie_menstruatie", "Luteal", "Ovulation", "Follicular", "Poverty", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "Nervous_dichotomous", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")
#################################
##### Isala x Ghep Analysis #####
#################################
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(lme4)
library(emmeans)
library(tidyverse)
library(car)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set working directory to current directory
dataDir = "Z:/shares/ghepmk_data/2020_Kappen_PMS//"
dateDir = "06102021//"
##### Loading data #####
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataSubset.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataScreen.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
isalaData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"Isala/PMS_UGENT_Q_for_mitchel.20220111.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
isalaData <- isalaData[isalaData$index != "ISALA00061", ] # Kicking out participant 000061 for now, because double entry
# Giving these columns a little more accessible names || WATCH OUT, PRONE TO ERROR
names(isalaData) <- c("index", "Leeftijd", "Day_in_Cycle", "Duratie_menstruatie", "Luteal", "Ovulation", "Follicular", "Poverty", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "Nervous_dichotomous", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")
substrRight <- function(x, n){ # A function that takes the last n characters of a string
substr(x, nchar(x)-n+1, nchar(x))}
# Make identical Isala identifiers
ghepData$IsalaNew <- substrRight(ghepData$Isala,5)
isalaData$IsalaNew <- substrRight(isalaData$index,5)
data <- merge(ghepData, isalaData, by = c("IsalaNew"))
data <- merge(isalaData, ghepData, by = c("IsalaNew"))
View(ghepData)
data <- merge(isalaData, ghepData, by = c("IsalaNew"), incomparables = NA)
a = ghepData$IsalaNew
b = isalaData$IsalaNew
a[a %in% b]
a[!(a %in% b)]
b[!(b %in% a)]
ghepData$IsalaNew[ghepData$IsalaNew %in% isalaData$IsalaNew]
ghepData$IsalaNew[!(ghepData$IsalaNew %in% isalaData$IsalaNew)]
ghepData <- ghepData[ghepData$IsalaNew == "oggen"]
ghepData <- ghepData[ghepData$IsalaNew == "ISALA"]
#################################
##### Isala x Ghep Analysis #####
#################################
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(lme4)
library(emmeans)
library(tidyverse)
library(car)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set working directory to current directory
dataDir = "Z:/shares/ghepmk_data/2020_Kappen_PMS//"
dateDir = "06102021//"
##### Loading data #####
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataSubset.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataScreen.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
isalaData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"Isala/PMS_UGENT_Q_for_mitchel.20220111.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
isalaData <- isalaData[isalaData$index != "ISALA00061", ] # Kicking out participant 000061 for now, because double entry
# Giving these columns a little more accessible names || WATCH OUT, PRONE TO ERROR
names(isalaData) <- c("index", "Leeftijd", "Day_in_Cycle", "Duratie_menstruatie", "Luteal", "Ovulation", "Follicular", "Poverty", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "Nervous_dichotomous", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")
substrRight <- function(x, n){ # A function that takes the last n characters of a string
substr(x, nchar(x)-n+1, nchar(x))}
# Make identical Isala identifiers
ghepData$IsalaNew <- substrRight(ghepData$Isala,5)
isalaData$IsalaNew <- substrRight(isalaData$index,5)
ghepData <- ghepData[ghepData$IsalaNew != "oggen", ]
ghepData <- ghepData[ghepData$IsalaNew != "ISALA", ]
#################################
##### Isala x Ghep Analysis #####
#################################
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(lme4)
library(emmeans)
library(tidyverse)
library(car)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set working directory to current directory
dataDir = "Z:/shares/ghepmk_data/2020_Kappen_PMS//"
dateDir = "06102021//"
##### Loading data #####
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataSubset.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataScreen.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
isalaData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"Isala/PMS_UGENT_Q_for_mitchel.20220111.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
isalaData <- isalaData[isalaData$index != "ISALA00061", ] # Kicking out participant 000061 for now, because double entry
# Giving these columns a little more accessible names || WATCH OUT, PRONE TO ERROR
names(isalaData) <- c("index", "Leeftijd", "Day_in_Cycle", "Duratie_menstruatie", "Luteal", "Ovulation", "Follicular", "Poverty", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "Nervous_dichotomous", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")
substrRight <- function(x, n){ # A function that takes the last n characters of a string
substr(x, nchar(x)-n+1, nchar(x))}
# Make identical Isala identifiers
ghepData$IsalaNew <- substrRight(ghepData$Isala,5)
isalaData$IsalaNew <- substrRight(isalaData$index,5)
# Delete these two columns
ghepData <- ghepData[ghepData$IsalaNew != "oggen", ]
ghepData <- ghepData[ghepData$IsalaNew != "ISALA", ]
data <- merge(ghepData, isalaData, by = c("IsalaNew"))
ghepData$IsalaNew[!(ghepData$IsalaNew %in% isalaData$IsalaNew)]
#################################
##### Isala x Ghep Analysis #####
#################################
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(lme4)
library(emmeans)
library(tidyverse)
library(car)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))# Set working directory to current directory
dataDir = "Z:/shares/ghepmk_data/2020_Kappen_PMS//"
dateDir = "06102021//"
##### Loading data #####
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataSubset.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
ghepData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"IsalaDataScreen.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
isalaData <- as.data.frame(read.csv(file = paste0(dataDir, dateDir,"Isala/PMS_UGENT_Q_for_mitchel.20220111.csv"), head = TRUE, sep=",",  stringsAsFactors=FALSE))
isalaData <- isalaData[isalaData$index != "ISALA00061", ] # Kicking out participant 000061 for now, because double entry
# Giving these columns a little more accessible names || WATCH OUT, PRONE TO ERROR
names(isalaData) <- c("index", "Leeftijd", "Day_in_Cycle", "Duratie_menstruatie", "Luteal", "Ovulation", "Follicular", "Poverty", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "Nervous_dichotomous", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")
substrRight <- function(x, n){ # A function that takes the last n characters of a string
substr(x, nchar(x)-n+1, nchar(x))}
# Make identical Isala identifiers
ghepData$IsalaNew <- substrRight(ghepData$Isala,5)
isalaData$IsalaNew <- substrRight(isalaData$index,5)
# Delete these two columns
ghepData <- ghepData[ghepData$IsalaNew != "oggen", ]
ghepData <- ghepData[ghepData$IsalaNew != "ISALA", ]
data <- merge(ghepData, isalaData, by = c("IsalaNew"))
print("Missing the following participants still: ")
ghepData$IsalaNew[!(ghepData$IsalaNew %in% isalaData$IsalaNew)]
cor(data$Age, data$Leeftijd)
cor(data$Duratie_menstruatie, data$MenstrualDuration)
cor(data$Duratie_menstruatie, data$MenstrualDuration, use="complete.obs")
data$Duratie_menstruatie
data$MenstrualDuration
data$MenstrualDuration[1]
data$MenstrualDuration[1] + 5
data$Duratie_menstruatie[1]
data$Duratie_menstruatie[1] + 5
cor(data, method = "pearson", use = "complete.obs")
View(data)
is.numeric(data)
is.numeric(data$participantNo)
data[c("Age", "Isala"), ]
test = data[c("Age", "Isala"), ]
View(test)
test = data[ ,c("Age", "Isala")]
data$TrueAge <- mean(data$Age, data$Leeftijd)
data$Age
data$Leeftijd
data$TrueAge <- (data$Age + data$Leeftijd) / 2
data$TrueAge
corMatrixData = data[ ,c("TrueAge", "FirstMenstrual", "MenstrualDuration", "allRRS", "allSymptoms", "allDisturbances", "DASS.Stress", "DASS.Anxiety", "DASS.Depresh", "PMSScore", "folliculairPSS", "folliculairBSRI", "folliculairPTQ", "luteaalPSS", "luteaalBSRI", "luteaalPTQ", "Day_in_Cycle", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")]
corMatrixData = data[ ,c("TrueAge", "FirstMenstrual", "MenstrualDuration", "allRRS", "allSymptoms", "allDisturbances", "DASS.Stress", "DASS.Anxiety", "DASS.Depresh", "PMSScore", "folliculairPSS", "folliculairBSRI", "folliculairPTQ", "luteaalPSS", "luteaalBSRI", "luteaalPTQ", "Day_in_Cycle", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")]
corMatrixData = data[ ,c("TrueAge", "FirstMenstrual", "MenstrualDuration", "allRRS", "allSymptoms", "allDisturbances", "DASS.Stress")] #, "DASS.Anxiety", "DASS.Depresh", "PMSScore", "folliculairPSS", "folliculairBSRI", "folliculairPTQ", "luteaalPSS", "luteaalBSRI", "luteaalPTQ", "Day_in_Cycle", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")]
corMatrixData = data[ ,c("TrueAge", "FirstMenstrual", "MenstrualDuration")] #, "allRRS", "allSymptoms", "allDisturbances", "DASS.Stress", "DASS.Anxiety", "DASS.Depresh", "PMSScore", "folliculairPSS", "folliculairBSRI", "folliculairPTQ", "luteaalPSS", "luteaalBSRI", "luteaalPTQ", "Day_in_Cycle", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")]
corMatrixData = data[ ,c("TrueAge", "FirstMenstrual", "MenstrualDuration", "allRRS", "allSymptoms" )] #, "allDisturbances", "DASS.Stress", "DASS.Anxiety", "DASS.Depresh", "PMSScore", "folliculairPSS", "folliculairBSRI", "folliculairPTQ", "luteaalPSS", "luteaalBSRI", "luteaalPTQ", "Day_in_Cycle", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")]
corMatrixData = data[ ,c("TrueAge", "FirstMenstrual", "MenstrualDuration", "allRRS", "allSymptoms", "allDisturbances")] #, "DASS.Stress", "DASS.Anxiety", "DASS.Depresh", "PMSScore", "folliculairPSS", "folliculairBSRI", "folliculairPTQ", "luteaalPSS", "luteaalBSRI", "luteaalPTQ", "Day_in_Cycle", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")]
corMatrixData = data[ ,c("TrueAge", "FirstMenstrual", "MenstrualDuration", "allRRS", "allSymptoms", "allDisturbance", "DASS.Stress", "DASS.Anxiety", "DASS.Depresh", "PMSScore", "folliculairPSS", "folliculairBSRI", "folliculairPTQ", "luteaalPSS", "luteaalBSRI", "luteaalPTQ", "Day_in_Cycle", "Kinderen_no.", "Adopted", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")]
cor(corMatrixData, method = "pearson", use = "complete.obs")
View(corMatrixData)
corMatrixData = data[ ,c("TrueAge", "FirstMenstrual", "MenstrualDuration", "allRRS", "allSymptoms", "allDisturbance", "DASS.Stress", "DASS.Anxiety", "DASS.Depresh", "PMSScore", "folliculairPSS", "folliculairBSRI", "folliculairPTQ", "luteaalPSS", "luteaalBSRI", "luteaalPTQ", "Day_in_Cycle", "Kinderen_no.", "Pluskinderen", "Nervous_scale", "Nothing_to_cheer_up", "calm", "downhearted_sad", "happy", "stressed", "ra_shannon", "Anaerococcus", "Bifidobacterium", "Gardnerella", "Clostridium", "Finegoldia", "Lactobacillus.crispatus.group", "Lactobacillus.iners.group", "Lactobacillus.gasseri.group", "Lactobacillus.jensenii.group", "Limosilactobacillus", "Prevotella", "Streptococcus")]
cor(corMatrixData, method = "pearson", use = "complete.obs")
plot(cor(corMatrixData, method = "pearson", use = "complete.obs"))
res <- cor(corMatrixData, method = "pearson", use = "complete.obs")
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
library(corrplot)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res2<-rcorr(as.matrix(corMatrixData))
library(Hmisc)
res2<-rcorr(as.matrix(corMatrixData))
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.05, insig = "blank")
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.05, insig = "blank")
res2
View(res2)
View(res2)
res2$r
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.05, insig = "blank")
data$Pluskinderen
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.05, insig = "blank", order = 'AOE')
corrplot(res2$r, type="upper", order="AOE",
p.mat = res2$P, sig.level = 0.05, insig = "blank")
corrMatOrder(res2,names(corMatrixData))
corrMatOrder(res2, order = names(corMatrixData))
corrMatOrder(res2, order = "hclust")
corrMatOrder(res, order = "hclust")
res
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.05, insig = "blank")
corrplot(res2$r, type="upper", order="AOE",
p.mat = res2$P, sig.level = 0.05, insig = "blank")
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.05, insig = "blank")
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="AOE",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
corrplot(res2$r, type="upper", order="AOE",
p.mat = res2$P, sig.level = 0.05, insig = "blank")
corrplot(res, type = "upper", order = "AOE",
tl.col = "black", tl.srt = 45)
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="AOE",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
corrplot(res2$r, type="upper", order="AOE",
p.mat = res2$P, insig = "blank")
corrplot(res2$r, type="upper", order="AOE"")
corrMatOrder(res, order = "hclust")
corrplot(res2$r, type="upper", order="AOE")
corrplot(res2, type = "upper", order = "AOE",
tl.col = "black", tl.srt = 45)
corrplot(res, type = "upper", order = "AOE",
tl.col = "black", tl.srt = 45)
# Insignificant correlations are leaved blank
corrplot(res2$r, type="upper", order="AOE",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
corrplot(res2$r, type="upper", order="AOE",
p.mat = res2$P, sig.level = 0.05, insig = "blank")

geom_line(data=dmean, aes(x=as.numeric(PMSScoreNew)+.2, y=Arousal), size=1, colour='black')+
geom_segment(aes(x = 1.2, y = 103, xend = 2.2, yend = 103), size= 1.7)+
# annotate('text', x=1.6, y=105, label=sprintf("\n%s\n", p_pms()), size=10)+
annotate('text', x=1.6, y=105, label='*', size=10)+
scale_x_discrete(labels=c('1'='control', '2'='premenstrual'))+
ggtitle('Arousal~PMSScoreNew')
# coord_flip()
p1 <- ggplot(dataBig2, aes(x = PMSScoreNew, y = Arousal)) +
geom_flat_violin(aes(fill=PMSScoreNew),position = position_nudge(x =.2, y = -1), adjust = 1.5, alpha = .5, colour = NA)+
geom_point(aes(colour=PMSScoreNew),position=position_jitter(width=.15), size=.25)+
geom_boxplot(aes(x = PMSScoreNew, y = Arousal, fill = PMSScoreNew),outlier.shape= NA, width = .1, colour = "black")+
geom_point(data = dmean, aes(x = as.numeric(PMSScoreNew), y = Arousal, fill=PMSScoreNew), shape = 21, size=6)+
# geom_line(data=dmean, aes(x=as.numeric(PMSScoreNew)+.2, y=Arousal), size=1, colour='black')+
geom_segment(aes(x = 1, y = 103, xend = 2, yend = 103), size= 1.7)+
# annotate('text', x=1.6, y=105, label=sprintf("\n%s\n", p_pms()), size=10)+
annotate('text', x=1.6, y=105, label='*', size=10)+
scale_x_discrete(labels=c('1'='control', '2'='premenstrual'))+
ggtitle('Arousal~PMSScoreNew')
# coord_flip()
p1
}else {
dmean<-summarySE(dataBig2, measurevar="Valence", groupvars=c('PMSScoreNew'))
p1 <- ggplot(dataBig2, aes(x = PMSScoreNew, y = Valence)) +
geom_flat_violin(aes(fill=PMSScoreNew),position = position_nudge(x =.2, y = -1), adjust= 1.5, alpha = .5, colour = NA)+
geom_point(aes(colour=PMSScoreNew),position=position_jitter(width=.15), size=.25)+
geom_boxplot(aes(x = PMSScoreNew, y = Valence, fill = PMSScoreNew),outlier.shape= NA, width = .1, colour = "black")+
geom_point(data = dmean, aes(x = as.numeric(PMSScoreNew)+.2, y = Valence, fill=PMSScoreNew), shape = 21, size=6)+
geom_line(data=dmean, aes(x=as.numeric(PMSScoreNew)+.2, y=Valence), size=1, colour='black')+
# annotate('text', x=1.6, y=70, label=sprintf("\n%s\n", p_pms()), size=8)+
ggtitle('Valence~PMSScoreNew')
# coord_flip()
p1
#
# p<- ggplot(dataBig2, aes(x=PMSScoreNew, y=Valence, fill=PMSScoreNew))+
#     geom_split_violin(adjust=1.5,alpha=.5, colour=NA )+
#   geom_point(aes(colour=PMSScoreNew),position=position_jitter(width=.15), size=.25)+
#   geom_boxplot(aes(x = PMSScoreNew, y = Valence, fill = PMSScoreNew),outlier.shape= NA, alpha = .5, width = .1, colour = "black")+
#   geom_point(data = dmean, aes(x = as.numeric(PMSScoreNew), y = Valence, group = PMSScoreNew, fill = PMSScoreNew), position=position_dodge(0.2), shape = 21, size=4)+
#   ggtitle('Valence ~ PMS')
# p
#
#
#
}
}, height=600)
output$splitviolin <-renderPlot({
if (grepl('Arousal', input$formula_choice)){
dmean<-summarySE(dataBig2, measurevar="Arousal", groupvars=c('PMSScoreNew', 'Moment'))
p<- ggplot(dataBig2, aes(x=Moment, y=Arousal, fill=PMSScoreNew))+
geom_split_violin(adjust =1.5, alpha=.5, colour= NA)+
geom_boxplot(aes(x = Moment, y = Arousal, fill = PMSScoreNew), position= position_dodge(0.2),outlier.shape= NA, alpha = .5, width = .1, colour = "black")+
geom_point(data = dmean, aes(x = as.numeric(Moment), y = Arousal, group = PMSScoreNew, fill = PMSScoreNew), position= position_dodge(0.2), shape = 21, size=4)+
scale_x_discrete(labels=c('1'='control', '2'='premenstrual'))+
annotate('text', x=1, y=105, label='*', size=8)+
annotate('text', x=2, y=105, label='*', size=8)+
geom_segment(aes(x = 0.955, y = 103, xend = 1.055, yend = 103), size= 2)+
geom_segment(aes(x = 1.955, y = 103, xend = 2.055, yend = 103), size= 2)+
ggtitle('Arousal ~ PMS * TestMoment')
p
} else if (grepl('Valence', input$formula_choice)){
dmean<-summarySE(dataBig2, measurevar="Valence", groupvars=c('PMSScoreNew', 'Moment'))
p<- ggplot(dataBig2, aes(x=Moment, y=Valence, fill=PMSScoreNew))+
geom_split_violin(adjust=1.5,alpha=.5, colour=NA)+
geom_boxplot(aes(x = Moment, y = Valence, fill = PMSScoreNew), position= position_dodge(0.2) ,outlier.shape= NA, alpha = .5, width = .1, colour = "black")+
geom_point(data = dmean, aes(x = as.numeric(Moment), y = Valence, group = PMSScoreNew, fill = PMSScoreNew), position=position_dodge(0.2), shape = 21, size=4)+
scale_x_discrete(labels=c('1'='control', '2'='premenstrual'))+
ggtitle('Valence ~ PMS * TestMoment')
p
}
}, height=600)
output$int_means <- renderPlot({
if ((grepl('Valence', input$formula_choice))){
dmean<-summarySE(dataBig2, measurevar="Valence", groupvars=c('TestMoment', 'PMSScoreNew'))# this function gives sd, se mean and default 95% C.I.
p<-ggplot(dmean, aes(x=TestMoment, y=Valence, colour=PMSScoreNew, group=PMSScoreNew)) +
geom_errorbar(aes(ymin=Valence-standard_error(Valence), ymax=Valence+standard_error(Valence), width=.1))+
geom_line() +
geom_point(size=3)
p} else {
dmean<-summarySE(dataBig2, measurevar="Arousal", groupvars=c('TestMoment', 'PMSScoreNew'))# this function gives sd, se mean and default 95% C.I.
p<-ggplot(dmean, aes(x=TestMoment, y=Arousal, colour=PMSScoreNew, group=PMSScoreNew)) +
geom_errorbar(aes(ymin=Arousal-standard_error(Arousal), ymax=Arousal+standard_error(Arousal), width=.1))+
geom_line() +
geom_point(size=3)
p}
})
models <- reactive({ # we need to create this within a reactive context to be able to access the formula_choice
m <- c()
# Formula <- 'DASS_Stress ~ PMSScoreNew * TestMoment + (1|Subject)'
Formula <- paste0(input$formula_choice, '+ (1|Subject)')
tryCatch(
{ d0.1 <- lmer(Formula,data=dataBig2); # if this formula works
m <- c(m, d1=d0.1)}, #we add this
error=function(e){})
tryCatch(
{ d0.2 <- glmer(Formula,data=dataBig2, family = gaussian(link = "inverse"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d1=d0.2)},
error=function(e){})
tryCatch(
{ d0.3 <- glmer(Formula,data=dataBig2, family = gaussian(link = "log"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d3=d0.3)},
error=function(e){})
tryCatch(
{ d0.4 <- glmer(Formula,data=dataBig2, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d4=d0.4)},
error=function(e){})
tryCatch(
{ d0.5 <- glmer(Formula,data=dataBig2, family = Gamma(link = "inverse"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d5=d0.5) },
error=function(e){})
tryCatch(
{ d0.6 <- glmer(Formula,data=dataBig2, family = Gamma(link = "log"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d6=d0.6) },
error=function(e){})
tryCatch(
{ d0.7 <- glmer(Formula,data=dataBig2, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
models <- c(models, d7=d0.7) },
error=function(e){})
tryCatch(
{ d0.8 <- glmer(Formula,data=dataBig2, family = inverse.gaussian(link = "inverse"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d8=d0.8) },
error=function(e){})
tryCatch(
{ d0.9 <- glmer(Formula,data=dataBig2, family = inverse.gaussian(link = "log"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ=nAGQ);
m <- c(m, d9=d0.9) },
error=function(e){})
m
})
output$table <-renderTable({
modelNames<-c()
tabel<-c()
for (i in 1:length(models())){
modelNames<-c(modelNames, names(models()[i]))
AIC<-AIC(models()[[i]])
tabel <- c (tabel, round(AIC))}
chosenModel = modelNames[which(tabel == min(tabel))]
tabel <- data.frame(Models=c('chosen  Model:', modelNames), AIC= c(chosenModel, tabel))
tabel
})
p<-reactive({
tabel<-c()
for (i in 1:length(models())){
AIC<- AIC(models()[[i]])
tabel <- c(tabel,round(AIC))}
chosenModel<-models()[which(tabel == min(tabel))]
Anova_1 <- Anova(chosenModel[[1]])
cat(sprintf("\nAnova\n"))
Anova_1
#            tabel<-c()
# for (i in 1:length(m)){
#     AIC<- AIC(m[[i]])
#     tabel <- c(tabel,round(AIC))}
# chosenModel<-m[which(tabel == min(tabel))]
#    Anova_1 <- Anova(chosenModel[[1]])
#    cat(sprintf("\nAnova\n"))
#    an<-Anova_1
})
output$Anova <- renderPrint({
p()
})
em <- reactive({
tabel<-c()
for (i in 1:length(models())){
AIC<- AIC(models()[[i]])
tabel <- c(tabel,round(AIC))}
chosenModel<-models()[which(tabel == min(tabel))]
cat(sprintf("\nemmeans of formula: %s\n", input$formula_choice))
if ((grepl("TestMoment", input$formula_choice)==FALSE)){
emmeans(chosenModel[[1]], pairwise ~ PMSScoreNew, adjust ="fdr", type="response")
}else{
emmeans(chosenModel[[1]], pairwise ~ PMSScoreNew*TestMoment, adjust ="fdr", type="response")
}
# tabel <- c()
#     for (i in 1:length(m)){
#   AIC<- AIC(m[[i]])
#   tabel <- c(tabel,round(AIC))}
# chosenModel<-m[which(tabel == min(tabel))]
# cat(sprintf("\nemmeans of formula: %s\n", Formula))
# if ((grepl("TestMoment", Formula)==FALSE)){
#  em<- emmeans(chosenModel[[1]], pairwise ~ PMSScoreNew, adjust ="fdr", type="response")
# }else{
#   em<-  emmeans(chosenModel[[1]], pairwise ~ PMSScoreNew*TestMoment, adjust ="fdr", type="response")
# }
#
})
output$emmeans <- renderPrint({
em()
})
}
shinyApp(ui=ui, server=server, options= list(height=800))
knitr::opts_chunk$set(dev = "png",
fig.path='Z:\\shares\\ghepmk_data\\2020_Kappen_PMS\\figures\\',
dpi = 300,
cache = FALSE)
library(Rmisc)
library(raincloudplots)
install.packages("raincloudplots")
library(lme4)
library(lmerTest)
library(effects)
library(dplyr)
library(car)
library(emmeans)
library(fitdistrplus)
library(gplots)
library(ggplot2)
library(ggstatsplot)
library(ggsignif)
library(ggformula)
library(ggdist)
library(ggpubr)
library(ggeffects)
library(gridExtra)
library(tidyverse)
library(pander)
library(stringr)
library(cowplot)
library(lavaan)
library(readr)
library(jpeg)
library(shiny)
library(reshape2)
library (yarrr)
library(knitr)
library(remotes)
install.packages("raincloudplots")
##############################
#                            #
# Analysis of State variables#
#         PMS data           #
#                            #
#############################
# This code uses premade csv for STATE specific variables and perform analysis and data viz
# Author: Mitchel Kappen & Sofie Raeymakers
# 10-3-2022
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
# Install packages
list.of.packages <- c("lme4",'emmeans','tidyverse', 'car', 'ggplot2', 'lsr', 'ggpubr', 'effectsize') # All relevant packages
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])] # Check if any of these packages are not yet installed
if(length(new.packages)) install.packages(new.packages) # If any packages are not yet installed, install them
library(lme4) #linear models
library(emmeans) # estimated marginal means
library(tidyverse) # transform data
library(car) # anova
library(ggplot2) # figures
library(lsr) # cohen's d
library(ggpubr) #correlations
library(effectsize)#phi
##### General settings #####
# Get and declare functions
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location - Else it can't find functions.R
source("functions.R") # This is a file in the same directory where you can stash your functions so you can save them there and have them together
# Set WD
Dir = "Data/" #data from VPN folder
# Get data
data <- read.csv(paste0(Dir, "cleanedDataMoments.csv"), header = TRUE, sep = ) #upload data
# save figures
if (!dir.exists("Figures")){ # Create folder for storing the figures if it doesn't exist yet
dir.create("Figures")}
plotPrefix <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/Figures/") # Prefix to easily store figures later
##### Data Cleaning #####
# Use names for PMS score - easier interpretation and plotting later
data$PMS[data$PMSScore == 0] = 'noPMS'
data$PMS[data$PMSScore == 1] = 'PMS'
data$PMS[data$PMSScore == 2] = 'PMDD'
data$PMS <- ordered(data$PMS, levels = c('noPMS', 'PMS', 'PMDD')) # Factorize and turn into ordered levels
# Factorize the rest of the data where needed
data$ID <- factor(data$ID)
data$newid = factor(seq(unique(data$ID))) # This creates a new ID variable that takes a logical order from 1-length(ID)
data$Moment <- factor(data$Moment)
data$Contraception <- factor(data$Contraception)
# Exclude everyone on the pill/hormonal coil/other: only those with Natural Contraception + copper coil are left included
data_allcontraception <- data # Backup the data prior to exclusion
data <- data[!(data$Contraception=="Pill"| data$Contraception=="other"|data$Contraception=="Hor. Coil"|data$Contraception=="Hor.Coil"),] # Only looking at non-hormonal contraceptives, so kick out all other data
###### Analysis ######
#### State: PSS ####
dataModel = data
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
formula <- 'PSS ~ PMS * Moment + Age + (1|newid)' # No added effect for contraception, yes for age. # anova(d0.1, d0.2, test="Chisq")
d0.1 <- lmer(formula,data=dataModel)
modelNames = c(d0.1) # Only d0.1 is taken into consideration due to zeroes being present
## Model Selection
tabel <- cbind(AIC(d0.1))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
######################################
#                                    #
# Analysis of Audio and Self-reports #
#       Social stressor data         #
#                                    #
######################################
# This code uses premade csv for speech variables and self-reports
# Here we perform data cleanup, analysis, and visualisation
# Author: Mitchel Kappen
# 12-4-2022
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(yarrr)
library(lme4)
library(emmeans)
library(pander)
library(reshape)
library(lme4)
library(lmerTest)
library(pander)
library(effects)
library(effectsize)
library(ggpubr)
library(car)
library(ggplot2)
library(arrow)
library(tibble)
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
source("functions.R") # This is a file in the same directory where you can stash your functions so you can save them there and have them together
#####  General settings #####
nAGQ = 1 # Glmer setting
pvalues = c() # Create a variable to store all p-values to correct later
plotPrefix <- "../figures/" # Define directory to store visualisations
data <- as.data.frame(read_parquet("../loc_data/df_gemaps_func.parquet")) # Read dataframe containing audio features and self-reports
##### Clean data up a bit #####
data$participantNum <- as.factor(data$participantNum)
agesex <- as.data.frame(read.csv("../loc_data/SexAge.csv")) # Read dataframe containing participants' Sex and Age
data <- merge(data, agesex, by = c("participantNum")) # Add demographics to main dataframe
# Add final condition names including 'baseline'
data$condition[data$fileNum == 0] = 'baseline'
data$condition[data$fileNum == 1|data$fileNum == 2|data$fileNum == 3] = 'Control'
data$condition[data$fileNum == 5|data$fileNum == 6|data$fileNum == 7] = 'Negative'
data$condition[data$fileNum == 4|data$fileNum == 8] = 'Rest'
# Get relevant data
dataBackup = data # Backup data so we can go back to this whenever
data = data[data$condition ==  'Control' | data$condition == 'Negative',] # Get only control and negative feedback data (kick out resting blocks)
data = data[data$HNRdBACF_sma3nz_amean > 0, ] # Kick out all the lines with negative HNR, that means the signal is too noisy to trust
# Factorize final relevant variables
data$condition <- as.factor(data$condition)
data$Sex <- as.factor(data$Sex)
# Audio Sample descriptives
t.first <- data[match(unique(data$participantNum), data$participantNum),] # Create dataframe with one line per unique participant
sprintf("Number of participants: %.f", nrow(t.first))
sprintf("Number of Men: %.f. Number of Women: %.f.", sum(t.first$Sex == 'M') , sum(t.first$Sex == 'F'))
sprintf("Age, Mean: %.2f, SD: %.2f.", mean(t.first$Age) , sd(t.first$Age))
######## Analysis ########
cbPalette <- c("#56B4E9", "#E69F00") # Define Colorblind proof plotting colors
####### Speech features #######
###### Speech features: F0 ######
formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ condition + Sex + (1|participantNum)' # Declare formula
dataModel = data # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III') #d0.2
effects::plot(d0.2,"condition")
plot.effect(d0.2, condition)
plot(effect("condition", d0.2))
#                                    #
# Analysis of Audio and Self-reports #
#       Social stressor data         #
#                                    #
######################################
# This code uses premade csv for speech variables and self-reports
# Here we perform data cleanup, analysis, and visualisation
# Author: Mitchel Kappen
# 12-4-2022
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
library(yarrr)
library(lme4)
library(emmeans)
library(pander)
library(reshape)
library(lme4)
library(lmerTest)
library(pander)
library(effects)
library(effectsize)
library(ggpubr)
library(car)
library(ggplot2)
library(arrow)
library(tibble)
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location
source("functions.R") # This is a file in the same directory where you can stash your functions so you can save them there and have them together
options(contrasts = c("contr.sum","contr.poly")) #use this for the p value of the t test
#####  General settings #####
nAGQ = 1 # Glmer setting
pvalues = c() # Create a variable to store all p-values to correct later
plotPrefix <- "../figures/" # Define directory to store visualisations
data <- as.data.frame(read_parquet("../loc_data/df_gemaps_func.parquet")) # Read dataframe containing audio features and self-reports
##### Clean data up a bit #####
data$participantNum <- as.factor(data$participantNum)
agesex <- as.data.frame(read.csv("../loc_data/SexAge.csv")) # Read dataframe containing participants' Sex and Age
data <- merge(data, agesex, by = c("participantNum")) # Add demographics to main dataframe
# Add final condition names including 'baseline'
data$condition[data$fileNum == 0] = 'baseline'
data$condition[data$fileNum == 1|data$fileNum == 2|data$fileNum == 3] = 'Control'
data$condition[data$fileNum == 5|data$fileNum == 6|data$fileNum == 7] = 'Negative'
data$condition[data$fileNum == 4|data$fileNum == 8] = 'Rest'
# Get relevant data
dataBackup = data # Backup data so we can go back to this whenever
data = data[data$condition ==  'Control' | data$condition == 'Negative',] # Get only control and negative feedback data (kick out resting blocks)
data = data[data$HNRdBACF_sma3nz_amean > 0, ] # Kick out all the lines with negative HNR, that means the signal is too noisy to trust
# Factorize final relevant variables
data$condition <- as.factor(data$condition)
data$Sex <- as.factor(data$Sex)
# Audio Sample descriptives
t.first <- data[match(unique(data$participantNum), data$participantNum),] # Create dataframe with one line per unique participant
sprintf("Number of participants: %.f", nrow(t.first))
sprintf("Number of Men: %.f. Number of Women: %.f.", sum(t.first$Sex == 'M') , sum(t.first$Sex == 'F'))
sprintf("Age, Mean: %.2f, SD: %.2f.", mean(t.first$Age) , sd(t.first$Age))
######## Analysis ########
cbPalette <- c("#56B4E9", "#E69F00") # Define Colorblind proof plotting colors
####### Speech features #######
###### Speech features: F0 ######
formula <- 'F0semitoneFrom27.5Hz_sma3nz_amean ~ condition + Sex + (1|participantNum)' # Declare formula
dataModel = data # Ensure correct data is taken
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
d0.1 <- lmer(formula,data=dataModel)
d0.2 <- glmer(formula,data=dataModel, family = Gamma(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
d0.3 <- glmer(formula,data=dataModel, family = inverse.gaussian(link = "identity"),glmerControl(optimizer= "bobyqa", optCtrl = list(maxfun = 100000)),nAGQ = nAGQ)
# Model Selection
modelNames = c(d0.1,d0.2,d0.3)
tabel <- cbind(AIC(d0.1), AIC(d0.2), AIC(d0.3))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III') #d0.2
tabel
##############################
#                            #
# Analysis of State variables#
#         PMS data           #
#                            #
#############################
# This code uses premade csv for STATE specific variables and perform analysis and data viz
# Author: Mitchel Kappen & Sofie Raeymakers
# 10-3-2022
##### Set environment #####
rm(list = ls()) # Clear environment
cat("\014") # Clear console
dev.off() # Clear plot window
# Install packages
list.of.packages <- c("lme4",'emmeans','tidyverse', 'car', 'ggplot2', 'lsr', 'ggpubr', 'effectsize') # All relevant packages
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])] # Check if any of these packages are not yet installed
if(length(new.packages)) install.packages(new.packages) # If any packages are not yet installed, install them
library(lme4) #linear models
library(emmeans) # estimated marginal means
library(tidyverse) # transform data
library(car) # anova
library(ggplot2) # figures
library(lsr) # cohen's d
library(ggpubr) #correlations
library(effectsize)#phi
##### General settings #####
# Get and declare functions
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set WD to script location - Else it can't find functions.R
source("functions.R") # This is a file in the same directory where you can stash your functions so you can save them there and have them together
# Set WD
Dir = "Data/" #data from VPN folder
# Get data
data <- read.csv(paste0(Dir, "cleanedDataMoments.csv"), header = TRUE, sep = ) #upload data
# save figures
if (!dir.exists("Figures")){ # Create folder for storing the figures if it doesn't exist yet
dir.create("Figures")}
plotPrefix <- paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/Figures/") # Prefix to easily store figures later
##### Data Cleaning #####
# Use names for PMS score - easier interpretation and plotting later
data$PMS[data$PMSScore == 0] = 'noPMS'
data$PMS[data$PMSScore == 1] = 'PMS'
data$PMS[data$PMSScore == 2] = 'PMDD'
data$PMS <- ordered(data$PMS, levels = c('noPMS', 'PMS', 'PMDD')) # Factorize and turn into ordered levels
# Factorize the rest of the data where needed
data$ID <- factor(data$ID)
data$newid = factor(seq(unique(data$ID))) # This creates a new ID variable that takes a logical order from 1-length(ID)
data$Moment <- factor(data$Moment)
data$Contraception <- factor(data$Contraception)
# Exclude everyone on the pill/hormonal coil/other: only those with Natural Contraception + copper coil are left included
data_allcontraception <- data # Backup the data prior to exclusion
data <- data[!(data$Contraception=="Pill"| data$Contraception=="other"|data$Contraception=="Hor. Coil"|data$Contraception=="Hor.Coil"),] # Only looking at non-hormonal contraceptives, so kick out all other data
###### Analysis ######
#### State: PSS ####
dataModel = data
rm(d0.1, d0.2, d0.3) # Just to be sure you're not comparing former models for this comparison
formula <- 'PSS ~ PMS * Moment + Age + (1|newid)' # No added effect for contraception, yes for age. # anova(d0.1, d0.2, test="Chisq")
d0.1 <- lmer(formula,data=dataModel)
modelNames = c(d0.1) # Only d0.1 is taken into consideration due to zeroes being present
## Model Selection
tabel <- cbind(AIC(d0.1))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
options(contrasts = c("contr.sum","contr.poly")) #use this for the p value of the t test
Anova(chosenModel[[1]], type = 'III')
formula <- 'PSS ~ PMS * Moment + Age + (1|newid)' # No added effect for contraception, yes for age. # anova(d0.1, d0.2, test="Chisq")
d0.1 <- lmer(formula,data=dataModel)
modelNames = c(d0.1) # Only d0.1 is taken into consideration due to zeroes being present
## Model Selection
tabel <- cbind(AIC(d0.1))
chosenModel = modelNames[which(tabel == min(tabel))] # Get model with lowest AIC
Anova(chosenModel[[1]], type = 'III')
### Between groups at time points
emmeans0.1 <- emmeans(chosenModel[[1]], pairwise ~ PMS | Moment, adjust ="fdr", type = "response") #we don't adjust because we do this later
emm0.1 <- summary(emmeans0.1)$emmeans
emmeans0.1$contrasts
